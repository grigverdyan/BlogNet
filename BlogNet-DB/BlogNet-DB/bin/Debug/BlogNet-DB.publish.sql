/*
Deployment script for BlogNet-DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BlogNet-DB"
:setvar DefaultFilePrefix "BlogNet-DB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Comments]...';


GO
CREATE TABLE [dbo].[Comments] (
    [CommentID]   INT            IDENTITY (1, 1) NOT NULL,
    [PostID]      INT            NULL,
    [UserID]      INT            NULL,
    [Content]     NVARCHAR (MAX) NOT NULL,
    [CommentDate] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([CommentID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Likes]...';


GO
CREATE TABLE [dbo].[Likes] (
    [LikesID]      INT      IDENTITY (1, 1) NOT NULL,
    [PostID]       INT      NULL,
    [UserID]       INT      NULL,
    [CreationTime] DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([LikesID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Posts]...';


GO
CREATE TABLE [dbo].[Posts] (
    [PostID]   INT            IDENTITY (1, 1) NOT NULL,
    [UserID]   INT            NULL,
    [Title]    NVARCHAR (100) NOT NULL,
    [Content]  NVARCHAR (MAX) NOT NULL,
    [PostDate] DATETIME       NOT NULL,
    PRIMARY KEY CLUSTERED ([PostID] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]           INT            IDENTITY (1, 1) NOT NULL,
    [Username]         NVARCHAR (50)  NOT NULL,
    [Email]            NVARCHAR (50)  NOT NULL,
    [Password]         NVARCHAR (50)  NOT NULL,
    [RegistrationDate] DATETIME       NOT NULL,
    [PhotoUrl]         VARCHAR (2048) NULL,
    PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Comments]...';


GO
ALTER TABLE [dbo].[Comments]
    ADD DEFAULT GETDATE() FOR [CommentDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Likes]...';


GO
ALTER TABLE [dbo].[Likes]
    ADD DEFAULT GETDATE() FOR [CreationTime];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Posts]...';


GO
ALTER TABLE [dbo].[Posts]
    ADD DEFAULT GETDATE() FOR [PostDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT GETDATE() FOR [RegistrationDate];


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Comments]...';


GO
ALTER TABLE [dbo].[Comments] WITH NOCHECK
    ADD FOREIGN KEY ([PostID]) REFERENCES [dbo].[Posts] ([PostID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Comments]...';


GO
ALTER TABLE [dbo].[Comments] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Likes]...';


GO
ALTER TABLE [dbo].[Likes] WITH NOCHECK
    ADD FOREIGN KEY ([PostID]) REFERENCES [dbo].[Posts] ([PostID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Likes]...';


GO
ALTER TABLE [dbo].[Likes] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Posts]...';


GO
ALTER TABLE [dbo].[Posts] WITH NOCHECK
    ADD FOREIGN KEY ([UserID]) REFERENCES [dbo].[Users] ([UserID]);


GO
PRINT N'Creating Procedure [dbo].[DeleteComment]...';


GO
CREATE PROCEDURE [dbo].[DeleteComment]
	@id int
AS
	DELETE FROM Comments
	WHERE [CommentID] = @id
    SELECT @@ROWCOUNT
GO
PRINT N'Creating Procedure [dbo].[DeletePost]...';


GO
CREATE PROCEDURE [dbo].[DeletePost]
	@id int
AS
	DELETE FROM Posts
	WHERE [PostID] = @id
    SELECT @@ROWCOUNT
GO
PRINT N'Creating Procedure [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@id int
AS
	DELETE FROM Users
	WHERE [UserID] = @id
    SELECT @@ROWCOUNT
GO
PRINT N'Creating Procedure [dbo].[GetComment]...';


GO
CREATE PROCEDURE [dbo].[GetComment]
	@id int
AS
	SELECT *
	FROM Comments
	WHERE CommentID = @id
GO
PRINT N'Creating Procedure [dbo].[GetComments]...';


GO
CREATE PROCEDURE [dbo].[GetComments]
AS
	SELECT *
	from Comments
GO
PRINT N'Creating Procedure [dbo].[GetPost]...';


GO
CREATE PROCEDURE [dbo].[GetPost]
	@id int
AS
	SELECT *
	FROM Posts
	WHERE PostID = @id
GO
PRINT N'Creating Procedure [dbo].[GetPosts]...';


GO
CREATE PROCEDURE [dbo].[GetPosts]
AS
	SELECT *
	from Posts
GO
PRINT N'Creating Procedure [dbo].[GetUser]...';


GO
CREATE PROCEDURE [dbo].[GetUser]
	@id int
AS
	SELECT *
	FROM Users
	WHERE UserID = @id
GO
PRINT N'Creating Procedure [dbo].[GetUsers]...';


GO
CREATE PROCEDURE [dbo].[GetUsers]
AS
	SELECT *
	from Users
GO
PRINT N'Creating Procedure [dbo].[UpsertComment]...';


GO
CREATE PROCEDURE [dbo].[UpsertComment]
	@content NVARCHAR(MAX) = NULL,
	@commentDate DATETIME = NULL,
	@userID int = NULL,
	@postID int = NULL,
	@commentID int = 0 out
AS
BEGIN
	IF(@commentID = 0)
	BEGIN
		INSERT INTO Comments([Content], [CommentDate], [UserID], [PostID])
		VALUES(@content, @commentDate, @userID, @postID)
		SET @postID = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE Comments
		SET [Content] = COALESCE(@content, [Content]),
			[CommentDate] = COALESCE(@commentDate, [CommentDate]),
			[UserID] = COALESCE(@userID, [UserID]),
			[PostID] = COALESCE(@postID, [PostID])
		WHERE [CommentID] = @commentID
	END
END
GO
PRINT N'Creating Procedure [dbo].[UpsertPost]...';


GO
CREATE PROCEDURE [dbo].[UpsertPost]
	@title NVARCHAR(100) = NULL,
	@content NVARCHAR(MAX) = NULL,
	@postDate DATETIME = NULL,
	@userID int = NULL,
	@postID int = 0 out
AS
BEGIN
	IF(@postID = 0)
	BEGIN
		INSERT INTO Posts([Title], [Content], [PostDate], [UserID])
		VALUES(@title, @content, @postDate, @userID)
		SET @postID = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE Posts
		SET [Title] = COALESCE(@title, [Title]),
			[Content] = COALESCE(@content, [Content]),
			[PostDate] = COALESCE(@postDate, [PostDate]),
			[UserID] = COALESCE(@userID, [UserID])
		WHERE [PostID] = @postID
	END
END
GO
PRINT N'Creating Procedure [dbo].[UpsertUser]...';


GO
CREATE PROCEDURE [dbo].[UpsertUser]
	@username NVARCHAR(50) = NULL,
	@email NVARCHAR(50) = NULL,
	@password NVARCHAR(50) = NULL,
	@regDate DATETIME = NULL,
	@photoUrl VARCHAR(2048) = NULL,
	@userID int = 0 out
AS
BEGIN
	IF(@userID = 0)
	BEGIN
		INSERT INTO Users([Username], [Email], [Password], [RegistrationDate], [PhotoUrl])
		VALUES(@username, @email, @password, @regDate, @photoUrl)
		SET @userID = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		UPDATE Users
		SET [Username] = COALESCE(@username, [Username]),
			[Email] = COALESCE(@email, [Email]),
			[Password] = COALESCE(@password, [Password]),
			[RegistrationDate] = COALESCE(@regDate, [RegistrationDate]),
			[PhotoUrl] = COALESCE(@photoUrl, [PhotoUrl])
		WHERE [UserID] = @userID
	END
END
GO
